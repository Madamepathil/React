{"ast":null,"code":"import { createStore } from \"redux\";\nimport { createSlice, configureStore } from \"@reduxjs/toolkit\";\nimport { act } from \"react-dom/test-utils\";\n\n//förbereder en slice av vår globala state\n//du behöver inte ta hänsyns till andra states\n//immer tar hand om uppdateringen\nconst initialCounterState = {\n  counter: 0,\n  showCounter: true\n};\nconst counterSlice = createSlice({\n  name: \"counter\",\n  initialState: initialCounterState,\n  reducers: {\n    increment(state, action) {\n      state.counter++;\n    },\n    decrement(state, action) {\n      state.counter--;\n    },\n    increase(state, action) {\n      state.counter = state.counter + action.payload.amount;\n    },\n    toggleCounter(state, action) {\n      state.showCounter = !state.showCounter;\n    }\n  }\n});\nconst initialAuthState = {\n  isAuthenticated: false\n};\ncreateSlice({\n  name: \"Auth\",\n  initialState: initialAuthState,\n  reducers: {\n    login(state, action) {},\n    logout(state, action) {}\n  }\n});\n/* const counterReducer = (state = initialState, action) => {\r\n  if (action.type == \"increment\") {\r\n    return {\r\n      counter: state.counter + 1,\r\n      showCounter: state.showCounter,\r\n    };\r\n  }\r\n\r\n  if (action.type == \"increase\") {\r\n    return {\r\n      counter: state.counter + action.amount,\r\n      showCounter: state.showCounter,\r\n    };\r\n  }\r\n  if (action.type == \"decrement\") {\r\n    return {\r\n      counter: state.counter - 1,\r\n      showCounter: state.showCounter,\r\n    };\r\n  }\r\n\r\n  if (action.type == \"toggle\") {\r\n    return {\r\n      counter: state.counter,\r\n      showCounter: !state.showCounter,\r\n    };\r\n  }\r\n\r\n  return state;\r\n}; */\n\n//cpnfigure store = value för store\n\nexport const counterActions = counterSlice.actions;\nconst store = configureStore({\n  reducer: counterSlice.reducer\n});\nexport default store;","map":{"version":3,"names":["createStore","createSlice","configureStore","act","initialCounterState","counter","showCounter","counterSlice","name","initialState","reducers","increment","state","action","decrement","increase","payload","amount","toggleCounter","initialAuthState","isAuthenticated","login","logout","counterActions","actions","store","reducer"],"sources":["C:/Users/alexa/Documents/UDEMY/React/REDUX copy 18 - 19/redux-project/src/store/index.js"],"sourcesContent":["import { createStore } from \"redux\";\r\nimport { createSlice, configureStore } from \"@reduxjs/toolkit\";\r\nimport { act } from \"react-dom/test-utils\";\r\n\r\n//förbereder en slice av vår globala state\r\n//du behöver inte ta hänsyns till andra states\r\n//immer tar hand om uppdateringen\r\nconst initialCounterState = { counter: 0, showCounter: true };\r\nconst counterSlice = createSlice({\r\n  name: \"counter\",\r\n  initialState: initialCounterState,\r\n  reducers: {\r\n    increment(state, action) {\r\n      state.counter++;\r\n    },\r\n    decrement(state, action) {\r\n      state.counter--;\r\n    },\r\n    increase(state, action) {\r\n      state.counter = state.counter + action.payload.amount;\r\n    },\r\n    toggleCounter(state, action) {\r\n      state.showCounter = !state.showCounter;\r\n    },\r\n  },\r\n});\r\n\r\nconst initialAuthState = {\r\n  isAuthenticated: false,\r\n};\r\ncreateSlice({\r\n  name: \"Auth\",\r\n  initialState: initialAuthState,\r\n  reducers: {\r\n    login(state, action) {},\r\n    logout(state, action) {},\r\n  },\r\n});\r\n/* const counterReducer = (state = initialState, action) => {\r\n  if (action.type == \"increment\") {\r\n    return {\r\n      counter: state.counter + 1,\r\n      showCounter: state.showCounter,\r\n    };\r\n  }\r\n\r\n  if (action.type == \"increase\") {\r\n    return {\r\n      counter: state.counter + action.amount,\r\n      showCounter: state.showCounter,\r\n    };\r\n  }\r\n  if (action.type == \"decrement\") {\r\n    return {\r\n      counter: state.counter - 1,\r\n      showCounter: state.showCounter,\r\n    };\r\n  }\r\n\r\n  if (action.type == \"toggle\") {\r\n    return {\r\n      counter: state.counter,\r\n      showCounter: !state.showCounter,\r\n    };\r\n  }\r\n\r\n  return state;\r\n}; */\r\n\r\n//cpnfigure store = value för store\r\n\r\nexport const counterActions = counterSlice.actions;\r\n\r\nconst store = configureStore({\r\n  reducer: counterSlice.reducer,\r\n});\r\nexport default store;\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,OAAO;AACnC,SAASC,WAAW,EAAEC,cAAc,QAAQ,kBAAkB;AAC9D,SAASC,GAAG,QAAQ,sBAAsB;;AAE1C;AACA;AACA;AACA,MAAMC,mBAAmB,GAAG;EAAEC,OAAO,EAAE,CAAC;EAAEC,WAAW,EAAE;AAAK,CAAC;AAC7D,MAAMC,YAAY,GAAGN,WAAW,CAAC;EAC/BO,IAAI,EAAE,SAAS;EACfC,YAAY,EAAEL,mBAAmB;EACjCM,QAAQ,EAAE;IACRC,SAAS,CAACC,KAAK,EAAEC,MAAM,EAAE;MACvBD,KAAK,CAACP,OAAO,EAAE;IACjB,CAAC;IACDS,SAAS,CAACF,KAAK,EAAEC,MAAM,EAAE;MACvBD,KAAK,CAACP,OAAO,EAAE;IACjB,CAAC;IACDU,QAAQ,CAACH,KAAK,EAAEC,MAAM,EAAE;MACtBD,KAAK,CAACP,OAAO,GAAGO,KAAK,CAACP,OAAO,GAAGQ,MAAM,CAACG,OAAO,CAACC,MAAM;IACvD,CAAC;IACDC,aAAa,CAACN,KAAK,EAAEC,MAAM,EAAE;MAC3BD,KAAK,CAACN,WAAW,GAAG,CAACM,KAAK,CAACN,WAAW;IACxC;EACF;AACF,CAAC,CAAC;AAEF,MAAMa,gBAAgB,GAAG;EACvBC,eAAe,EAAE;AACnB,CAAC;AACDnB,WAAW,CAAC;EACVO,IAAI,EAAE,MAAM;EACZC,YAAY,EAAEU,gBAAgB;EAC9BT,QAAQ,EAAE;IACRW,KAAK,CAACT,KAAK,EAAEC,MAAM,EAAE,CAAC,CAAC;IACvBS,MAAM,CAACV,KAAK,EAAEC,MAAM,EAAE,CAAC;EACzB;AACF,CAAC,CAAC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAO,MAAMU,cAAc,GAAGhB,YAAY,CAACiB,OAAO;AAElD,MAAMC,KAAK,GAAGvB,cAAc,CAAC;EAC3BwB,OAAO,EAAEnB,YAAY,CAACmB;AACxB,CAAC,CAAC;AACF,eAAeD,KAAK"},"metadata":{},"sourceType":"module"}